#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright 2015 - Gabriel Acosta <acostadariogabriel@gmail.com>
#
# This file is part of Pireal.
#
# Pireal is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# any later version.
#
# Pireal is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Pireal; If not, see <http://www.gnu.org/licenses/>.

import sys
import ctypes
import argparse

if sys.version_info.major != 3:
    print("Pireal need Python 3 :(")
    sys.exit(-1)

import os
from PyQt5.QtWidgets import (
    QApplication
)
from PyQt5.QtGui import (
    QIcon,
    QColor,
    QPalette,
)
from PyQt5.QtCore import (
    QLocale,
    QTranslator,
    QLibraryInfo,
    QT_VERSION_STR,
    Qt,
    QTextCodec
)

from src.core.logger import Logger

# Logger
logger = Logger(__name__)

INSTALL_DIR = "@ INSTALLED_BASE_DIR @"

if os.path.exists(INSTALL_DIR):
    project = INSTALL_DIR
else:
    project = os.path.abspath(os.path.dirname(
        os.path.realpath(sys.argv[0])))

if project not in sys.path:
    sys.path.insert(0, project)

from src.core import settings
from src.core.settings import CONFIG

# PSetting = settings.PSetting


def create_dirs():
    """ This functions create a structure folders used by Pireal  """

    pireal_dir = settings.PIREAL_DIR
    is_win = settings.WINDOWS
    for path in (pireal_dir, settings.PIREAL_DATABASES):
        if not os.path.isdir(path):
            os.mkdir(path)
            if path == pireal_dir and is_win:
                # Set hide attribute if OS is WIndows
                ctypes.windll.kernel32.SetFileAttributesW(path, 0x02)


def __get_versions():
    """ Version information for components used by Pireal """

    import platform

    # OS
    if sys.platform.startswith('linux'):
        system, name = platform.uname()[:2]
    else:
        system = platform.uname()[0]
        name = platform.uname()[2]
    # Python version
    python_version = platform.python_version()

    return {
        'python': python_version,
        'os': system,
        'name': name,
        'qt': QT_VERSION_STR  # Qt version
    }


if __name__ == "__main__":

    # Parse arguments
    pargs = argparse.ArgumentParser(
        prog='Pireal',
        usage='./pireal [-h] [--log loglevel]',
        description='Pireal is a tool for working with Relational Algebra',
        epilog='Pireal website: http://centaurialpha.github.io/pireal')
    pargs.add_argument('--log', metavar='loglevel',
                       help="Level to use for logging: 'debug', 'info', "
                            "'warning', 'error', 'critical'")
    args = pargs.parse_args()
    if args.log is not None:
        Logger.set_level(args.log)

    # Create dirs used by Pireal
    create_dirs()

    info = __get_versions()
    CONFIG.load_settings()

    QTextCodec.setCodecForLocale(QTextCodec.codecForName("utf8"))

    # Import resources
    from src import resources  # noqa

    qapp = QApplication(sys.argv)
    qapp.setAttribute(Qt.AA_EnableHighDpiScaling)
    palette = QPalette()
    palette.setColor(QPalette.ToolTipBase, QColor(225, 225, 225))
    palette.setColor(QPalette.Highlight, QColor("#5294e2"))
    qapp.setPalette(palette)

    if not settings.WINDOWS:
        qapp.setCursorFlashTime(0)

    # Icon
    qapp.setWindowIcon(QIcon(":img/icon"))

    # Language
    lang = CONFIG.get("language")
    if lang != "eng":
        translator = QTranslator()
        translator.load(os.path.join(settings.LANGUAGE_PATH, lang + ".qm"))
        qapp.installTranslator(translator)

    # Load services
    from src.gui import central_widget  # noqa
    from src.gui import notification  # noqa
    from src.gui.main_window import Pireal

    # Set stylesheet
    with open(settings.STYLE_SHEET) as f:
        qapp.setStyleSheet(f.read())

    gui = Pireal()
    gui.show()

    sys.exit(qapp.exec_())
